import os
from typing import Dict, Any, List
from enum import Enum
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.output_parsers import PydanticOutputParser
from pydantic import BaseModel, Field

load_dotenv()


class EmergencyType(str, Enum):
    """Tipos de emerg√™ncia dispon√≠veis"""
    SAMU = "samu"
    POLICIA = "policia"
    BOMBEIRO = "bombeiro"


class EmergencyClassification(BaseModel):
    """Modelo para a classifica√ß√£o de emerg√™ncia"""
    tipos_emergencia: List[EmergencyType] = Field(
        description="Lista dos tipos de emerg√™ncia identificados (pode ser m√∫ltiplos)"
    )
    justificativa: str = Field(
        description="Justificativa detalhada para a classifica√ß√£o"
    )

    confianca: float = Field(
        description="N√≠vel de confian√ßa da classifica√ß√£o (0.0 a 1.0)"
    )


class EmergencyClassifierAgent:
    """Agente para classifica√ß√£o de emerg√™ncias"""
    
    def __init__(self, openai_api_key: str = None):
        """
        Inicializa o agente classificador de emerg√™ncias
        
        Args:
            openai_api_key: Chave da API do OpenAI (opcional, pode vir do ambiente)
        """
        if openai_api_key:
            os.environ["OPENAI_API_KEY"] = openai_api_key
            
        # Verificar se a chave da API est√° configurada
        if not os.getenv("OPENAI_API_KEY"):
            raise ValueError("OPENAI_API_KEY n√£o encontrada. Configure: export OPENAI_API_KEY='sua_chave'")
            
        # Modelo pode ser configurado via vari√°vel de ambiente
        model_name = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
        
        self.llm = ChatOpenAI(
            temperature=0.1,  # Baixa temperatura para respostas mais consistentes
            max_tokens=1000,
            model_name=model_name
        )
        
        # Parser para estruturar a sa√≠da
        self.output_parser = PydanticOutputParser(pydantic_object=EmergencyClassification)
        
        # Template do prompt detalhado
        self.prompt_template = PromptTemplate(
            input_variables=["texto_emergencia"],
            template=self._create_detailed_prompt(),
            partial_variables={"format_instructions": self.output_parser.get_format_instructions()}
        )
    
    def _create_detailed_prompt(self) -> str:
        """Cria um prompt detalhado para classifica√ß√£o de emerg√™ncias"""
        return """
Voc√™ √© um especialista em triagem de emerg√™ncias do Brasil. Sua fun√ß√£o √© analisar descri√ß√µes de situa√ß√µes e classificar quais servi√ßos de emerg√™ncia devem ser acionados.

IMPORTANTE: Voc√™ DEVE escolher um ou mais dos servi√ßos abaixo. SEMPRE retorne pelo menos um servi√ßo.
Para situa√ß√µes complexas, escolha M√öLTIPLOS servi√ßos quando apropriado.

SERVI√áOS DISPON√çVEIS:
- SAMU: Emerg√™ncias m√©dicas, acidentes com feridos, problemas de sa√∫de graves
- POLICIA: Crimes em andamento, viol√™ncia, roubos, situa√ß√µes de seguran√ßa p√∫blica  
- BOMBEIRO: Inc√™ndios, resgates, acidentes graves, vazamentos, pessoas presas

CRIT√âRIOS DE CLASSIFICA√á√ÉO:

SAMU:
- Pessoa inconsciente ou com dificuldade respirat√≥ria
- Dor no peito/suspeita de infarto
- Acidentes com ferimentos graves
- Overdose de drogas/intoxica√ß√£o
- Tentativa de suic√≠dio
- Complica√ß√µes na gravidez/parto
- Queimaduras graves
- Fraturas expostas
- Emerg√™ncias m√©dicas em geral

POLICIA:
- Assalto em andamento
- Viol√™ncia dom√©stica
- Briga com armas
- Sequestro
- Tr√°fico de drogas flagrante
- Perturba√ß√£o grave da ordem
- Pessoa armada amea√ßando
- Crimes em flagrante

BOMBEIRO:
- Inc√™ndio de qualquer tipo
- Pessoa presa em elevador/local fechado
- Acidentes de tr√¢nsito com v√≠timas presas
- Vazamento de g√°s
- Animais pe√ßonhentos
- Alagamentos/enchentes
- Queda de √°rvores/postes
- Resgates em altura
- Emerg√™ncias estruturais

SITUA√á√ïES M√öLTIPLAS (escolha mais de um):
- Acidente grave com crime: POLICIA + SAMU + BOMBEIRO
- Inc√™ndio em pr√©dio com feridos: BOMBEIRO + SAMU
- Assalto com feridos: POLICIA + SAMU
- Acidente com v√≠tima presa: BOMBEIRO + SAMU

INSTRU√á√ïES:
1. Analise cuidadosamente o texto fornecido
2. Identifique palavras-chave e contexto da situa√ß√£o
3. Considere a urg√™ncia e gravidade
4. SEMPRE escolha pelo menos um servi√ßo
5. Para situa√ß√µes complexas, escolha m√∫ltiplos servi√ßos
6. Forne√ßa justificativa clara
7. Avalie sua confian√ßa na classifica√ß√£o

TEXTO DA EMERG√äNCIA: {texto_emergencia}

{format_instructions}

Responda APENAS com o JSON estruturado conforme solicitado.
"""
    
    def classify_emergency(self, texto: str) -> Dict[str, Any]:
        """
        Classifica um texto de emerg√™ncia
        
        Args:
            texto: Descri√ß√£o da situa√ß√£o de emerg√™ncia
            
        Returns:
            Dicion√°rio com a classifica√ß√£o estruturada
        """
        try:
            # Gera o prompt com o texto fornecido
            prompt = self.prompt_template.format(texto_emergencia=texto)
            
            # Processa com o LLM
            response = self.llm.invoke(prompt)
            
            # Parse da resposta estruturada
            parsed_response = self.output_parser.parse(response.content)
            
            # Converte para dicion√°rio - m√∫ltiplos tipos suportados
            result = {
                "tipos_emergencia": [tipo.value for tipo in parsed_response.tipos_emergencia],
                "justificativa": parsed_response.justificativa,
                "confianca": parsed_response.confianca,
                "status": "sucesso"
            }
            
            return result
            
        except Exception as e:
            return {
                "status": "erro",
                "erro": str(e),
                "tipos_emergencia": ["samu"],  # Default para emerg√™ncia m√©dica
                "justificativa": f"Erro ao processar: {str(e)}. Classifica√ß√£o padr√£o: SAMU por seguran√ßa.",
                "confianca": 0.0
            }
    
    def get_contact_info(self, emergency_types: List[str]) -> List[Dict[str, str]]:
        """
        Retorna informa√ß√µes de contato para os tipos de emerg√™ncia
        
        Args:
            emergency_types: Lista de tipos de emerg√™ncia (samu, policia, bombeiro)
            
        Returns:
            Lista de dicion√°rios com informa√ß√µes de contato
        """
        contacts = {
            "samu": {
                "telefone": "192",
                "nome": "SAMU - Servi√ßo de Atendimento M√≥vel de Urg√™ncia",
                "tipo": "Emerg√™ncias m√©dicas"
            },
            "policia": {
                "telefone": "190",
                "nome": "Pol√≠cia Militar",
                "tipo": "Seguran√ßa p√∫blica e crimes"
            },
            "bombeiro": {
                "telefone": "193",
                "nome": "Corpo de Bombeiros",
                "tipo": "Inc√™ndios, resgates e acidentes"
            }
        }
        
        return [contacts.get(emergency_type, contacts["samu"]) for emergency_type in emergency_types]


def test_classifier():
    """Fun√ß√£o de teste para o classificador de emerg√™ncias."""
    # Exemplos de teste - incluindo casos de m√∫ltiplos tipos
    test_cases = [
        "Tem fogo na casa do vizinho, muita fuma√ßa!",
        "Meu pai teve um infarto, n√£o est√° respirando bem",
        "Tem um homem armado na pra√ßa amea√ßando as pessoas",
        "Batida de carro na esquina, um ferido consciente",
        "Vazamento de g√°s no pr√©dio, cheiro forte",
        "Assalto em andamento no banco, ladr√£o armado e tem feridos",
        "Pessoa presa no elevador h√° 2 horas",
        "Crian√ßa engasgada, n√£o consegue respirar",
        "Briga de vizinhos com facas, tem sangue",
        "√Årvore caiu na rua bloqueando a passagem",
        "Inc√™ndio no pr√©dio com pessoas presas nos andares superiores",
        "Acidente de carro com v√≠tima presa nas ferragens e inconsciente",
        "Assalto √† m√£o armada com v√≠tima baleada",
        "Explos√£o em posto de gasolina com feridos e fogo"
    ]
    
    print("üß™ Iniciando testes do classificador de emerg√™ncias...")
    
    try:
        classifier = EmergencyClassifierAgent()
        
        for i, case in enumerate(test_cases, 1):
            print(f"\n--- TESTE {i} ---")
            print(f"Relato: {case}")
            
            result = classifier.classify_emergency(case)
            tipos_str = ", ".join(result['tipos_emergencia']).upper()
            print(f"Tipos: {tipos_str}")
            print(f"Confian√ßa: {result['confianca']:.1%}")
            print(f"Status: {result['status']}")
            print(f"Justificativa: {result['justificativa']}")
            
            # Verifica se retornou m√∫ltiplos tipos
            if len(result['tipos_emergencia']) > 1:
                print("‚úÖ M√öLTIPLOS TIPOS DETECTADOS!")
            
    except Exception as e:
        print(f"‚ùå Erro nos testes: {e}")


if __name__ == "__main__":
    test_classifier()
