"""
Exemplo de uso do sistema de classifica√ß√£o de urg√™ncia de emerg√™ncias 911.
Demonstra como inicializar e utilizar o agente de IA para classificar ocorr√™ncias.
"""

import os
from agentes.urgency_classifier import UrgencyClassifier

from dotenv import load_dotenv

load_dotenv()

def exemplo_basico():
    """Exemplo b√°sico de uso do classificador."""
    
    print("üö® SISTEMA DE CLASSIFICA√á√ÉO DE EMERG√äNCIAS 911 üö®\n")
    
    # Configura API key (substitua pela sua chave)
    # os.environ["OPENAI_API_KEY"] = "sua_chave_openai_aqui"
    
    try:
        # Inicializa o classificador
        print("Inicializando sistema...")
        classifier = UrgencyClassifier()
        
        # Verifica status do sistema
        status = classifier.get_system_status()
        print(f"‚úÖ Sistema inicializado - Modelo: {status['llm_model']}")
        
        # Exemplos de ocorr√™ncias para teste
        ocorrencias_exemplo = [
            "Minha casa est√° pegando fogo! Tem muita fuma√ßa e as chamas est√£o altas!",
            "Um homem caiu da escada e est√° inconsciente, tem muito sangue na cabe√ßa",
            "Tem dois homens brigando na rua com facas, um deles est√° ferido",
            "Meu carro bateu em outro na esquina, ningu√©m se machucou mas n√£o conseguimos sair",
            "Tem um vazamento de g√°s no pr√©dio, o cheiro est√° muito forte",
            "Uma senhora passou mal no shopping, est√° com dificuldade para respirar",
            "Vi um homem roubando uma bolsa e correndo pela pra√ßa",
            "Tem uma √°rvore que caiu na rua e est√° bloqueando o tr√¢nsito"
        ]
        
        print("\n" + "="*60)
        print("PROCESSANDO OCORR√äNCIAS DE EXEMPLO")
        print("="*60)
        
        # Processa cada ocorr√™ncia
        for i, ocorrencia in enumerate(ocorrencias_exemplo, 1):
            print(f"\nüîç OCORR√äNCIA {i}:")
            print(f"Relato: '{ocorrencia}'")
            print("-" * 50)
            
            # Classifica a ocorr√™ncia
            resultado = classifier.classify_emergency(ocorrencia)
            
            # Mostra resultado formatado
            print(classifier.get_classification_summary(resultado))
            
            print("-" * 50)
        
        print("\n‚úÖ Processamento conclu√≠do!")
        
    except Exception as e:
        print(f"‚ùå Erro no exemplo: {e}")
        print("Verifique se:")
        print("1. A API key da OpenAI est√° configurada")
        print("2. O Docker com Chroma est√° rodando (docker-compose up -d)")
        print("3. As depend√™ncias est√£o instaladas (pip install -r requirements.txt)")

def exemplo_uso_personalizado():
    """Exemplo de uso com conhecimento personalizado."""
    
    print("\nüîß EXEMPLO COM CONHECIMENTO PERSONALIZADO\n")
    
    try:
        classifier = UrgencyClassifier()
        
        # Adiciona conhecimento personalizado
        documentos_personalizados = [
            """
            PROTOCOLO ESPECIAL PARA ANIMAIS:
            - Animais feridos em via p√∫blica: N√≠vel 3, Canal: bombeiros
            - Animais atacando pessoas: N√≠vel 4, Canal: policia + bombeiros
            - Animais presos em locais altos: N√≠vel 2, Canal: bombeiros
            - Animais mortos causando problemas sanit√°rios: N√≠vel 2, Canal: defesa_civil
            """,
            """
            PROTOCOLO PARA EVENTOS CLIM√ÅTICOS:
            - Enchentes em andamento: N√≠vel 4, Canal: defesa_civil
            - Vendaval com destelhamentos: N√≠vel 3, Canal: defesa_civil
            - Granizo causando ferimentos: N√≠vel 4, Canal: saude + defesa_civil
            - Raios causando inc√™ndios: N√≠vel 5, Canal: bombeiros
            """
        ]
        
        categorias = ["animais", "clima"]
        
        print("Adicionando conhecimento personalizado...")
        success = classifier.add_knowledge(documentos_personalizados, categorias)
        
        if success:
            print("‚úÖ Conhecimento personalizado adicionado!")
            
            # Testa com casos espec√≠ficos
            casos_especiais = [
                "Tem um cachorro ferido no meio da rua, ele foi atropelado",
                "Est√° chovendo muito forte e minha rua est√° alagando",
                "Um gato est√° preso no telhado h√° 2 dias",
                "O vento arrancou o telhado da casa do vizinho"
            ]
            
            print("\nTestando casos com conhecimento personalizado:")
            for caso in casos_especiais:
                resultado = classifier.classify_emergency(caso)
                print(f"\nüìã Caso: {caso}")
                print(f"‚û°Ô∏è Canal: {resultado.canal} | Urg√™ncia: {resultado.nivel_urgencia}")
        
    except Exception as e:
        print(f"‚ùå Erro no exemplo personalizado: {e}")

def exemplo_lote():
    """Exemplo de processamento em lote."""
    
    print("\nüì¶ EXEMPLO DE PROCESSAMENTO EM LOTE\n")
    
    try:
        classifier = UrgencyClassifier()
        
        # Lista de ocorr√™ncias para processar em lote
        lote_ocorrencias = [
            "Inc√™ndio em pr√©dio comercial",
            "Acidente de carro com feridos",
            "Roubo em andamento no banco",
            "Pessoa passando mal na rua",
            "Cachorro atacando crian√ßas"
        ]
        
        print("Processando lote de ocorr√™ncias...")
        resultados = classifier.classify_batch(lote_ocorrencias)
        
        # Estat√≠sticas do lote
        canais = {}
        urgencias = {}
        
        for resultado in resultados:
            canais[resultado.canal] = canais.get(resultado.canal, 0) + 1
            urgencias[resultado.nivel_urgencia] = urgencias.get(resultado.nivel_urgencia, 0) + 1
        
        print(f"\nüìä ESTAT√çSTICAS DO LOTE ({len(resultados)} ocorr√™ncias):")
        print("\nDistribui√ß√£o por canal:")
        for canal, count in canais.items():
            print(f"  {canal}: {count} ocorr√™ncia(s)")
        
        print("\nDistribui√ß√£o por urg√™ncia:")
        for nivel, count in sorted(urgencias.items()):
            print(f"  N√≠vel {nivel}: {count} ocorr√™ncia(s)")
        
    except Exception as e:
        print(f"‚ùå Erro no processamento em lote: {e}")

def main():
    """Fun√ß√£o principal com menu de exemplos."""
    
    print("Escolha um exemplo para executar:")
    print("1. Exemplo b√°sico")
    print("2. Exemplo com conhecimento personalizado") 
    print("3. Exemplo de processamento em lote")
    print("4. Executar todos os exemplos")
    print("0. Sair")
    
    while True:
        try:
            opcao = input("\nDigite sua op√ß√£o (0-4): ").strip()
            
            if opcao == "0":
                print("üëã At√© logo!")
                break
            elif opcao == "1":
                exemplo_basico()
            elif opcao == "2":
                exemplo_uso_personalizado()
            elif opcao == "3":
                exemplo_lote()
            elif opcao == "4":
                exemplo_basico()
                exemplo_uso_personalizado()
                exemplo_lote()
            else:
                print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
                
        except KeyboardInterrupt:
            print("\nüëã Interrompido pelo usu√°rio. At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    main() 