#!/usr/bin/env python3
"""
Script auxiliar para configurar o banco de dados
Execute na raiz do projeto: python setup_database.py
"""

import asyncio
import sys
from api.config import init_database, test_database_connection, check_database_tables

async def main():
    """Fun√ß√£o principal para configurar o banco de dados"""
    print("üöÄ Configurando banco de dados...")
    
    try:
        # Primeiro, testar a conex√£o
        print("\n1. Testando conex√£o com o banco...")
        connection_ok = await test_database_connection()
        
        if not connection_ok:
            print("‚ùå Erro na conex√£o. Verifique se o PostgreSQL est√° rodando e as configura√ß√µes est√£o corretas.")
            sys.exit(1)
        
        # Verificar se as tabelas j√° existem
        print("\n2. Verificando se as tabelas existem...")
        tables_exist = await check_database_tables()
        
        if tables_exist:
            print("‚ÑπÔ∏è  Tabelas j√° existem. Pulando cria√ß√£o...")
            print("‚úÖ Configura√ß√£o conclu√≠da.")
            return
        
        # Inicializar o banco de dados
        print("\n3. Inicializando banco de dados...")
        await init_database()
        
        # Verificar novamente se as tabelas foram criadas
        print("\n4. Verificando se as tabelas foram criadas...")
        tables_created = await check_database_tables()
        
        if tables_created:
            print("\nüéâ Banco de dados configurado com sucesso!")
            print("Voc√™ pode agora usar o servi√ßo de Ocorr√™ncias.")
        else:
            print("\n‚ùå Erro ao criar as tabelas.")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n‚ùå Erro durante a configura√ß√£o: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 
